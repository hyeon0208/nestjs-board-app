name: üöÄ Deploy Dispatcher

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Î∞∞Ìè¨Ìï† ÌôòÍ≤ΩÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.'
        required: true
        type: choice
        options: ['dev', 'prod']
        default: 'dev'

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ap-northeast-2
  APP_NAME: syncly-scraper
  S3_BUCKET: syncly-crawling-bucket

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      dev_targets: ${{ steps.env.outputs.dev_targets }}
      syncly_scraping_targets: ${{ steps.env.outputs.syncly_scraping_targets }}
      social_scraping_targets: ${{ steps.env.outputs.social_scraping_targets }}
      api_and_social_targets: ${{ steps.env.outputs.api_and_social_targets }}
    steps:
    - name: Determine environment and SSM targets
      id: env
      run: |
        echo "environment=${{ inputs.target_environment }}" >> $GITHUB_OUTPUT
        if [ "${{ inputs.target_environment }}" = "dev" ]; then
          echo 'dev_targets=Key=tag:Environment,Values=dev Key=tag:App,Values=${{ env.APP_NAME }}' >> $GITHUB_OUTPUT
        else
          echo 'syncly_scraping_targets=Key=tag:Environment,Values=prod Key=tag:App,Values=${{ env.APP_NAME }} Key=tag:Role,Values=syncly-scraping' >> $GITHUB_OUTPUT
          echo 'social_scraping_targets=Key=tag:Environment,Values=prod Key=tag:App,Values=${{ env.APP_NAME }} Key=tag:Role,Values=social-scraping' >> $GITHUB_OUTPUT
          echo 'api_and_social_targets=Key=tag:Environment,Values=prod Key=tag:App,Values=${{ env.APP_NAME }} Key=tag:Role,Values=api-and-social-scraping' >> $GITHUB_OUTPUT
        fi

  approval: # prod ÌôòÍ≤ΩÏùº ÎïåÎßå Ïã§Ìñâ ÏàòÎèô ÏäπÏù∏ ÌïÑÏöî
    needs: [determine-environment]
    if: needs.determine-environment.outputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: prod
    steps:
    - name: Wait for production approval
      run: echo "üîí Production deployment requires approval"

  build-push:
    needs: [determine-environment]
    if: always() && needs.determine-environment.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_uri: ${{ steps.build.outputs.image_uri }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate version
      id: version
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        TIMESTAMP=$(date +%Y.%m.%d)
        SUFFIX=${{ needs.determine-environment.outputs.environment == 'dev' && '-dev' || '-prod' }}
        VERSION="v${TIMESTAMP}-${SHORT_SHA}${SUFFIX}" # ex: v2025.01.01-abc1234-dev
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üöÄ [${{ needs.determine-environment.outputs.environment }}] New version: $VERSION"

    - name: Build and push to ECR
      id: build
      env:
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      run: |
        ECR_REPOSITORY="${{ env.APP_NAME }}-${{ needs.determine-environment.outputs.environment }}"
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${{ steps.version.outputs.version }}
        
        # DOCKER_BUILDKIT=1 docker build --secret id=sentry_token,env=SENTRY_AUTH_TOKEN -t $IMAGE_URI .

        # docker push $IMAGE_URI
        
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
        echo "üöÄ Pushed: $IMAGE_URI"

  deploy-dev:
    needs: [determine-environment, build-push]
    if: always() && needs.build-push.result == 'success' && needs.determine-environment.outputs.environment == 'dev'
    runs-on: ubuntu-latest
    outputs:
      command_id: ${{ steps.deploy.outputs.command_id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Dev Environment
      id: deploy
      run: |
        DEPLOY_SCRIPT_B64=$(cat ./scripts/deploy.sh | base64 | tr -d '\n')
        COMPOSE_FILE_B64=$(cat ./docker-compose.yml | base64 | tr -d '\n')

        echo '${{ needs.determine-environment.outputs.dev_targets }}'

        echo "=== Testing decode ==="
        echo "${DEPLOY_SCRIPT_B64}" | base64 -d > /tmp/test_deploy.sh
        echo "${COMPOSE_FILE_B64}" | base64 -d > /tmp/test_compose.yml
        
        echo "=== Deploy script first 5 lines ==="
        head -5 /tmp/test_deploy.sh
        
        echo "=== Compose file first 5 lines ==="
        head -5 /tmp/test_compose.yml

        echo "üì° Dev SSM Command ID: $COMMAND_ID"
        echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT

  deploy-prod-syncly-scraping:
    needs: [determine-environment, build-push, approval]
    if: needs.build-push.result == 'success' && needs.determine-environment.outputs.environment == 'prod' && needs.approval.result == 'success'
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      command_id: ${{ steps.deploy.outputs.command_id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Syncly Scraping Servers
      id: deploy
      run: |
        DEPLOY_SCRIPT_B64=$(cat ./scripts/deploy.sh | base64 | tr -d '\n')
        COMPOSE_FILE_B64=$(cat ./docker-compose.yml | base64 | tr -d '\n')

        echo '${{ needs.determine-environment.outputs.syncly_scraping_targets }}'

        echo "=== Testing decode ==="
        echo "${DEPLOY_SCRIPT_B64}" | base64 -d > /tmp/test_deploy.sh
        echo "${COMPOSE_FILE_B64}" | base64 -d > /tmp/test_compose.yml
        
        echo "=== Deploy script first 5 lines ==="
        head -5 /tmp/test_deploy.sh
        
        echo "=== Compose file first 5 lines ==="
        head -5 /tmp/test_compose.yml

        echo "üì° Syncly Scraping SSM Command ID: $COMMAND_ID"
        echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT

  deploy-prod-social-scraping:
    needs: [determine-environment, build-push, approval]
    if: needs.build-push.result == 'success' && needs.determine-environment.outputs.environment == 'prod' && needs.approval.result == 'success'
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      command_id: ${{ steps.deploy.outputs.command_id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Social Scraping Servers
      id: deploy
      run: |
        DEPLOY_SCRIPT_B64=$(cat ./scripts/deploy.sh | base64 | tr -d '\n')
        COMPOSE_FILE_B64=$(cat ./docker-compose.yml | base64 | tr -d '\n')

        echo '${{ needs.determine-environment.outputs.social_scraping_targets }}'

        echo "=== Testing decode ==="
        echo "${DEPLOY_SCRIPT_B64}" | base64 -d > /tmp/test_deploy.sh
        echo "${COMPOSE_FILE_B64}" | base64 -d > /tmp/test_compose.yml
        
        echo "=== Deploy script first 5 lines ==="
        head -5 /tmp/test_deploy.sh
        
        echo "=== Compose file first 5 lines ==="
        head -5 /tmp/test_compose.yml

        echo "üì° Social Scraping SSM Command ID: $COMMAND_ID"
        echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT

  deploy-prod-api-and-social:
    needs: [determine-environment, build-push, approval]
    if: needs.build-push.result == 'success' && needs.determine-environment.outputs.environment == 'prod' && needs.approval.result == 'success'
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      command_id: ${{ steps.deploy.outputs.command_id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to API + Social Scraping Servers
      id: deploy
      run: |
        DEPLOY_SCRIPT_B64=$(cat ./scripts/deploy.sh | base64 | tr -d '\n')
        COMPOSE_FILE_B64=$(cat ./docker-composeyml | base64 | tr -d '\n')

        echo '${{ needs.determine-environment.outputs.api_and_social_targets }}'

        echo "=== Testing decode ==="
        echo "${DEPLOY_SCRIPT_B64}" | base64 -d > /tmp/test_deploy.sh
        echo "${COMPOSE_FILE_B64}" | base64 -d > /tmp/test_compose.yml
        
        echo "=== Deploy script first 5 lines ==="
        head -5 /tmp/test_deploy.sh
        
        echo "=== Compose file first 5 lines ==="
        head -5 /tmp/test_compose.yml

        echo "üì° API + Social Scraping SSM Command ID: $COMMAND_ID"
        echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT

  wait-for-deployment-completion:
    needs: [determine-environment, deploy-dev, deploy-prod-syncly-scraping, deploy-prod-social-scraping, deploy-prod-api-and-social]
    if: always() && (needs.deploy-dev.result == 'success' || (needs.deploy-prod-syncly-scraping.result == 'success' && needs.deploy-prod-social-scraping.result == 'success' && needs.deploy-prod-api-and-social.result == 'success'))
    runs-on: ubuntu-latest

    steps:
    - name: Wait for deployment completion
      run: |
        echo "‚è≥ Waiting for all deployments to complete..."

        if [ "${{ needs.determine-environment.outputs.environment }}" = "dev" ]; then
          COMMAND_ID="${{ needs.deploy-dev.outputs.command_id }}"
          echo "üì° Checking Dev deployment: $COMMAND_ID"
          done
        else
          SYNCLY_COMMAND_ID="${{ needs.deploy-prod-syncly-scraping.outputs.command_id }}"
          SOCIAL_COMMAND_ID="${{ needs.deploy-prod-social-scraping.outputs.command_id }}"
          API_AND_SOCIAL_COMMAND_ID="${{ needs.deploy-prod-api-and-social.outputs.command_id }}"

          echo "üì° Checking Prod deployments:"
          echo "  - Syncly Scraping: $SYNCLY_COMMAND_ID"
          echo "  - Social Scraping: $SOCIAL_COMMAND_ID"
          echo "  - API + Social: $API_AND_SOCIAL_COMMAND_ID"
          done
        fi

        echo "‚è∞ Deployment status check completed"

