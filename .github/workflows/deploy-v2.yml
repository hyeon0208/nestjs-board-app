name: 🚀 Deploy Dispatcher

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: '배포할 환경을 선택해주세요.'
        required: true
        type: choice
        options: ['dev', 'prod']
        default: 'dev'

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ap-northeast-2
  APP_NAME: test-app
  S3_BUCKET: test-app-bucket

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      ssm_targets: ${{ steps.env.outputs.ssm_targets }}
    steps:
    - name: Determine environment and SSM targets
      id: env
      run: |
        echo "environment=${{ inputs.target_environment }}" >> $GITHUB_OUTPUT
        
  approval: # prod 환경일 때만 실행 수동 승인 필요
    needs: [determine-environment]
    if: needs.determine-environment.outputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: prod
    steps:
    - name: Wait for production approval
      run: echo "🔒 Production deployment requires approval"

  build-push:
    needs: [determine-environment, approval]
    if: always() && needs.determine-environment.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_uri: ${{ steps.build.outputs.image_uri }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate version
      id: version
      run: |
        echo "🔍 Deployment Debug Info:"
        echo "build-push.result: '${{ needs.determine-environment.result }}'"
        echo "environment: '${{ needs.determine-environment.outputs.environment }}'"
        echo "condition check: build-push.result == 'success' is ${{ needs.determine-environment.result == 'success' }}"
        echo "condition check: environment == 'dev' is ${{ needs.determine-environment.outputs.environment == 'dev' }}"
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        TIMESTAMP=$(date +%Y.%m.%d)
        SUFFIX=${{ needs.determine-environment.outputs.environment == 'dev' && '-dev' || '-prod' }}
        VERSION="v${TIMESTAMP}-${SHORT_SHA}${SUFFIX}" # ex: v2025.01.01-abc1234-dev
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "🚀 [${{ needs.determine-environment.outputs.environment }}] New version: $VERSION"

    - name: Build and push to ECR
      id: build
      run: |
        ECR_REPOSITORY="${{ env.APP_NAME }}-${{ needs.determine-environment.outputs.environment }}"
        IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${{ steps.version.outputs.version }}
        
        # docker build -t $IMAGE_URI .
        # docker push $IMAGE_URI
        
        echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
        echo "🚀 Pushed: $IMAGE_URI"

  deploy:
    needs: [determine-environment, build-push]
    if: always() && needs.build-push.result == 'success' && needs.determine-environment.outputs.environment == 'dev'
    runs-on: ubuntu-latest
    
    steps:
    - name: Trigger SSM Deploy Command
      id: deploy
      run: |
        
        echo "📡 SSM Command ID: $COMMAND_ID"
        echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT

    - name: Wait for deployment completion
      run: |
        echo "⏳ Waiting for deployment to complete..."

        echo "⏰ Deployment timed out after 3 minutes"
        exit 1

  deploy-prod-syncly-scraping:
    needs: [determine-environment, build-push, approval]
    if: needs.build-push.result == 'success' && needs.determine-environment.outputs.environment == 'prod' && needs.approval.result == 'success'
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Syncly Scraping Servers
      id: deploy
      run: |
        DEPLOY_SCRIPT_B64=$(cat ./scripts/deploy.sh | base64 | tr -d '\n')
        COMPOSE_FILE_B64=$(cat ./docker-compose.yml | base64 | tr -d '\n')

        echo '${{ needs.determine-environment.outputs.environment }}'
        echo "${{ needs.determine-environment.outputs.environment}}"

        mkdir -p ~/temp

        echo "${DEPLOY_SCRIPT_B64}" | base64 -d > ~/temp/deploy.sh
        echo "${COMPOSE_FILE_B64}" | base64 -d > ~/temp/docker-compose.yml
        echo "📡 Syncly Scraping SSM Command ID: $COMMAND_ID"
        echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT