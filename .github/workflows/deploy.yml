name: ðŸš€ Deploy Application

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target Environment'
        required: true
        type: choice
        options: ['dev', 'prod']
        default: 'dev'

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: syncly-crawler-v2-base
  DEPLOY_PATH: ~/syncly-crawler

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      servers: ${{ steps.env.outputs.servers }}
    steps:
    - name: Determine target environment and servers
      id: env
      run: |
        echo "environment=${{ inputs.target_environment }}" >> $GITHUB_OUTPUT
        
        if [ "${{ inputs.target_environment }}" = "dev" ]; then
          echo 'servers=["dev"]' >> $GITHUB_OUTPUT
        else
          echo 'servers=["prod-1", "prod-2", "prod-3"]' >> $GITHUB_OUTPUT
        fi

  approval:
    needs: [determine-environment]
    if: needs.determine-environment.outputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: prod-approval
    steps:
    - name: Wait for production approval
      run: echo "ðŸ”’ Production deployment requires approval"

  build:
    needs: [determine-environment, approval]
    if: always() && needs.determine-environment.result == 'success' && (needs.determine-environment.outputs.environment != 'prod' || needs.approval.result == 'success')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate version
      id: version
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        TIMESTAMP=$(date +%Y.%m.%d)
        SUFFIX=${{ needs.determine-environment.outputs.environment == 'dev' && '-dev' || '' }}
        VERSION="v${TIMESTAMP}-${SHORT_SHA}${SUFFIX}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "ðŸš€ [${{ needs.determine-environment.outputs.environment }}] New version: $VERSION"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build and push to ECR
      run: |
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
        
        docker build \
          --label "version=${{ steps.version.outputs.version }}" \
          --label "environment=${{ needs.determine-environment.outputs.environment }}" \
          -t ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:${{ steps.version.outputs.version }} .
        
        docker push ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:${{ steps.version.outputs.version }}

  deploy:
    needs: [determine-environment, build]
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    strategy:
      matrix:
        server: ${{ fromJson(needs.determine-environment.outputs.servers) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Upload files to EC2
      uses: appleboy/scp-action@v1
      with:
        host: ${{ secrets[format('HOST_{0}', matrix.server)] || secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "docker-compose.yml"
        target: "${{ env.DEPLOY_PATH }}/"
        overwrite: true

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1
      env:
        TARGET_VERSION: ${{ needs.build.outputs.version }}
        ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        SERVER: ${{ matrix.server }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        API_KEY: ${{ secrets.API_KEY }}
      with:
        host: ${{ secrets[format('HOST_{0}', matrix.server)] || secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: TARGET_VERSION,ENVIRONMENT,SERVER,ECR_REGISTRY,ECR_REPOSITORY,DATABASE_URL,REDIS_URL,JWT_SECRET,API_KEY
        script: |
          cd ${{ env.DEPLOY_PATH }}
          chmod +x scripts/*.sh
          
          echo "ðŸŽ¯ Deploying to: $ENVIRONMENT ($SERVER)"
          echo "ðŸ“¦ Version: $TARGET_VERSION"
          
          ./scripts/deploy.sh "$TARGET_VERSION"

    - name: Deployment Result
      run: |
        echo "âœ… [${{ matrix.server }}] Deployment completed: ${{ needs.build.outputs.version }}"