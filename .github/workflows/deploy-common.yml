name: 🔧 Common Deploy Workflow

# 환경 선택 → 2. 버전 생성/롤백 → 3. 승인(Prod만) → 4. 빌드&푸시 → 5. EC2 배포 → 6. 헬스체크 → 7. 완료/롤백

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      rollback_version:
        required: false
        type: string

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: syncly-crawler-v2-base
  DEPLOY_PATH: ~/syncly-crawler

jobs:
  approval:
    if: inputs.environment == 'prod'
    runs-on: ubuntu-latest
    environment: 
      name: prod-approval
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
    - name: Wait for approval
      run: echo "Waiting for production deployment approval..."

  deploy:
    runs-on: ubuntu-latest
    needs: [approval]
    if: always() && (inputs.environment != 'prod' || needs.approval.result == 'success')
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate version
      id: version
      run: |
        if [ -n "${{ inputs.rollback_version }}" ]; then
          echo "version=${{ inputs.rollback_version }}" >> $GITHUB_OUTPUT
          echo "mode=rollback" >> $GITHUB_OUTPUT
          echo "[${{ inputs.environment }}] Rollback to: ${{ inputs.rollback_version }}"
        else
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TIMESTAMP=$(date +%Y.%m.%d)
          SUFFIX=${{ inputs.environment == 'dev' && '-dev' || '' }}
          VERSION="v${TIMESTAMP}-${SHORT_SHA}${SUFFIX}"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "mode=deploy" >> $GITHUB_OUTPUT
          echo "[${{ inputs.environment }}] New version: $VERSION"
        fi

    - name: Configure AWS credentials
      if: steps.version.outputs.mode == 'deploy'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build and push to ECR
      if: steps.version.outputs.mode == 'deploy'
      run: |
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
        
        docker build \
          --label "version=${{ steps.version.outputs.version }}" \
          --label "environment=${{ inputs.environment }}" \
          --label "commit.sha=${{ github.sha }}" \
          --label "build.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          -t ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:${{ steps.version.outputs.version }} .
        
        docker push ${{ secrets.ECR_REGISTRY }}/$ECR_REPOSITORY:${{ steps.version.outputs.version }}
        
        echo "Image pushed: ${{ steps.version.outputs.version }}"

    - name: Upload files to EC2
      uses: appleboy/scp-action@v1
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "scripts/*,docker-compose.yml"
        target: "${{ env.DEPLOY_PATH }}/"
        overwrite: true

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1
      env:
        DEPLOY_MODE: ${{ steps.version.outputs.mode }}
        TARGET_VERSION: ${{ steps.version.outputs.version }}
        ENVIRONMENT: ${{ inputs.environment }}
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        CW_LOG_GROUP: ${{ secrets.CW_LOG_GROUP }}
        CW_STREAM_PREFIX: ${{ secrets.CW_STREAM_PREFIX }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        API_KEY: ${{ secrets.API_KEY }}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        envs: DEPLOY_MODE,TARGET_VERSION,ENVIRONMENT,ECR_REGISTRY,ECR_REPOSITORY,CW_LOG_GROUP,CW_STREAM_PREFIX,DATABASE_URL,REDIS_URL,JWT_SECRET,API_KEY
        script: |
          cd ${{ env.DEPLOY_PATH }}
          chmod +x scripts/*.sh
          
          if [ "$DEPLOY_MODE" = "rollback" ]; then
            ./scripts/rollback.sh "$TARGET_VERSION"
          else
            ./scripts/deploy.sh "$TARGET_VERSION"
          fi